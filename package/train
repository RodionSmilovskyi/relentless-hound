#!/usr/bin/env python
# pylint: skip-file
import random
import sys
from itertools import count
import gym
import math
import os
import imageio
import pyvirtualdisplay

import torch.optim as optim
from collections import namedtuple, deque
from package.ppo import PPO
from package import settings
import argparse

import torch
import torch.nn as nn


from package.dqn import DQN
from package.replay_memory import ReplayMemory, Transition


BATCH_SIZE = 128
GAMMA = 0.99
EPS_START = 0.9
EPS_END = 0.05
EPS_DECAY = 1000
TAU = 0.005
LR = 1e-4


# if GPU is to be used
device = torch.device(
    "cuda"
    if torch.cuda.is_available()
    else "mps" if torch.backends.mps.is_available() else "cpu"
)

steps_done = 0


def train():
    """Main training method"""

    print(f"Used device {device.type}")

    env = gym.make(
        "Pendulum-v1", render_mode="human" if settings.USE_GUI is True else "rgb_array"
    )

    model = PPO(env)
    model.learn(1000000)
    

    print("Complete")

    # if not os.path.exists(settings.MODEL_PATH):
    #     os.makedirs(settings.MODEL_PATH)



if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--prefix", type=str, default=os.path.dirname(os.path.abspath(__file__))
    )
    parser.add_argument("--use-gui", action="store_true")

    args = parser.parse_args()

    print(args)

    settings.INPUT_PATH = os.path.join(args.prefix, "input", "data", "training")
    settings.OUTPUT_PATH = os.path.join(args.prefix, "output")
    settings.MODEL_PATH = os.path.join(args.prefix, "model")
    settings.CHECKPOINT_PATH = os.path.join(args.prefix, "checkpoints")
    settings.USE_GUI = args.use_gui 
    
    if not os.path.exists(settings.MODEL_PATH):
        os.makedirs(settings.MODEL_PATH)
        
    if not os.path.exists(settings.CHECKPOINT_PATH):
        os.makedirs(settings.CHECKPOINT_PATH)

    train()

    print("SUCCESS")

    sys.exit(0)
