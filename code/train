#!/usr/bin/env python

import sys
import globals
import numpy as np
import gym
import tensorflow as tf
import os
import argparse
import random
import time

from gym.spaces import Discrete, Box
from gym.wrappers import FrameStack
from typing import Optional

from tf_agents.environments.gym_wrapper import GymWrapper
from envs.drone_env import DroneEnv
from envs.cv_wrapper import CvWrapper
from envs.reward_wrapper import RewardWrapper
from tf_agents.trajectories import time_step as ts

os.environ['TF_USE_LEGACY_KERAS'] = '1'


def episode_trigger_fn(episode_number):
    if episode_number == 0 or episode_number == globals.EPISODES - 1:
        return True
    else:
        return (episode_number + 1) % globals.EPISODE_TRIGGER_STEP == 0


def train():
    n_episodes = globals.EPISODES
    gym_env = RewardWrapper(FrameStack(CvWrapper(DroneEnv(globals.USE_GUI)), 4))
    
    env = GymWrapper(gym_env)

    start_time = time.time()
    
    terminated = False
    
    env.reset()
    
    while (terminated == False):
        action = np.random.random(gym_env.action_space.shape)
        res = env.step(action)
        
        terminated = res.step_type == ts.StepType.LAST

    end_time = time.time()
    elapsed_time = end_time - start_time

    print(f"Elapsed time: {elapsed_time} seconds")

    # if not os.path.exists(globals.MODEL_PATH):
    #     os.makedirs(globals.MODEL_PATH)

    env.close()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument("--use-gui", action="store_true")
    parser.add_argument("--episodes", type=int, default=10)
    parser.add_argument(
        "--prefix", type=str, default=os.path.dirname(os.path.abspath(__file__))
    )
    parser.add_argument("--episode-trigger-step", type=int, default=1000)

    args = parser.parse_args()

    print(args)

    globals.OUTPUT_PATH = os.path.join(args.prefix, "output")
    globals.MODEL_PATH = os.path.join(args.prefix, "model")
    globals.USE_GUI = args.use_gui
    globals.EPISODES = args.episodes
    globals.EPISODE_TRIGGER_STEP = args.episode_trigger_step

    file_writer = tf.summary.create_file_writer(globals.OUTPUT_PATH + "/tensorboard")
    file_writer.set_as_default()

    print("Num GPUs Available: ", len(tf.config.list_physical_devices("GPU")))

    train()


    # sys.exit(0)
